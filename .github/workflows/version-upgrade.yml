name: Release and Tag Synchronization

on:
  workflow_dispatch:
    inputs:
      TAG_NAME:
        description: 'Bump Version (e.g., v1.0.0)'
        required: true
      ENABLE_MAJOR_TAG:
        description: 'Enable updating the major version tag'
        required: false
        default: 'true'
      ENABLE_LATEST_TAG:
        description: 'Enable updating the latest tag'
        required: false
        default: 'true'

  push:
    tags:
      - 'v*.*.*'

env:
  BRANCH_PREFIX: release
  BASE_BRANCH: main

permissions:
  contents: read

jobs:
  bump_and_pr:
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.set-branch.outputs.branch }}
      pr_number: ${{ steps.create-pr.outputs.pr_number }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate TAG_NAME
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Validating TAG_NAME: ${{ github.event.inputs.TAG_NAME }}"
          if ! echo "${{ github.event.inputs.TAG_NAME }}" | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' ; then
            echo "::error::Invalid TAG_NAME format. Must follow semantic versioning (e.g., v1.0.0)"
            exit 1
          fi
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] TAG_NAME is valid"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Configure Git
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Configuring Git user..."
          git config user.name "GitHub Actions Bot"
          git config user.email "bot@example.com"
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Git configuration complete"

      - name: Install Dependencies and Bump Version
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Installing dependencies..."
          npm ci || { echo "::error::npm ci failed"; exit 1; }
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Bumping version to ${{ github.event.inputs.TAG_NAME }}..."
          npm version ${{ github.event.inputs.TAG_NAME }} --no-git-tag-version || { echo "::error::npm version failed"; exit 1; }
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ github.event.inputs.TAG_NAME }}"
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Version bumped and committed"

      - name: Create Branch
        id: set-branch
        run: |
          BRANCH_NAME=${{ env.BRANCH_PREFIX }}_${{ github.event.inputs.TAG_NAME }}
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Creating branch: $BRANCH_NAME"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME || { echo "::error::git push failed"; exit 1; }
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Branch $BRANCH_NAME created and pushed"

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            console.log(`[$(new Date().toISOString())] Creating PR for branch ${{ steps.set-branch.outputs.branch }}...`);
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${{ github.event.inputs.TAG_NAME }}`,
              body: `Automated release for version ${{ github.event.inputs.TAG_NAME }}`,
              head: `${{ steps.set-branch.outputs.branch }}`,
              base: '${{ env.BASE_BRANCH }}',
              draft: false
            });
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              reviewers: ['bd-SrinathAkkem']
            });
            core.setOutput('pr_number', pr.number);
            console.log(`[$(new Date().toISOString())] Created PR #${pr.number}`);

      - name: Clean Up Workspace
        if: always()
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Cleaning up workspace..."
          rm -rf $GITHUB_WORKSPACE/* $GITHUB_WORKSPACE/.*
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Workspace cleaned"

  wait_for_approval:
    if: github.event_name == 'workflow_dispatch'
    needs: bump_and_pr
    permissions:
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - name: Wait for PR Approval
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            console.log(`[$(new Date().toISOString())] Waiting for approval on PR #${{ needs.bump_and_pr.outputs.pr_number }}...`);
            const prNumber = ${{ needs.bump_and_pr.outputs.pr_number }};
            const maxAttempts = 120;
            for (let i = 0; i < maxAttempts; i++) {
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              const approved = reviews.some(review => review.state === 'APPROVED');
              if (approved) {
                console.log(`[$(new Date().toISOString())] PR #${{ needs.bump_and_pr.outputs.pr_number }} approved`);
                return;
              }
              console.log(`[$(new Date().toISOString())] Attempt ${i+1}/${maxAttempts}: No approval yet`);
              await new Promise(resolve => setTimeout(resolve, 30000));
            }
            core.setFailed('PR was not approved within 1 hour');

  merge_and_tag:
    if: github.event_name == 'workflow_dispatch'
    needs: wait_for_approval
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_BRANCH }}

      - name: Configure Git
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Configuring Git user..."
          git config user.name "GitHub Actions Bot"
          git config user.email "bot@example.com"
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Git configuration complete"

      - name: Check for Merge Conflicts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            console.log(`[$(new Date().toISOString())] Checking for merge conflicts on PR #${{ needs.bump_and_pr.outputs.pr_number }}...`);
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.bump_and_pr.outputs.pr_number }}
            });
            if (pr.mergeable_state === 'dirty') {
              core.setFailed('Merge conflict detected. Please resolve manually.');
            } else {
              console.log(`[$(new Date().toISOString())] No merge conflicts detected`);

      - name: Merge Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            console.log(`[$(new Date().toISOString())] Merging PR #${{ needs.bump_and_pr.outputs.pr_number }}...`);
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.bump_and_pr.outputs.pr_number }},
              merge_method: 'merge'
            });
            console.log(`[$(new Date().toISOString())] PR #${{ needs.bump_and_pr.outputs.pr_number }} merged successfully`);

      - name: Pull Latest Main Branch
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Pulling latest changes from ${{ env.BASE_BRANCH }}..."
          git pull origin ${{ env.BASE_BRANCH }} || { echo "::error::git pull failed"; exit 1; }
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Latest changes pulled"

      - name: Create and Push Git Tag
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Creating tag ${{ github.event.inputs.TAG_NAME }}..."
          git tag ${{ github.event.inputs.TAG_NAME }}
          git push origin ${{ github.event.inputs.TAG_NAME }} || { echo "::error::git push tag failed"; exit 1; }
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Tag ${{ github.event.inputs.TAG_NAME }} created and pushed successfully"

      - name: Clean Up Release Branch
        if: always() && needs.bump_and_pr.outputs.branch_name != ''
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Deleting branch ${{ needs.bump_and_pr.outputs.branch_name }}..."
          git push origin --delete ${{ needs.bump_and_pr.outputs.branch_name }} || echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Branch already deleted or does not exist"
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Branch cleanup complete"

      - name: Clean Up Workspace
        if: always()
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Cleaning up workspace..."
          rm -rf $GITHUB_WORKSPACE/* $GITHUB_WORKSPACE/.*
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Workspace cleaned"

  sync_tags:
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Configuring Git user..."
          git config user.name "GitHub Actions Bot"
          git config user.email "bot@example.com"
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Git configuration complete"

      - name: Extract and Validate Version
        id: version
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Processing pushed tag: $TAG"
          if [[ "$TAG" =~ ^v([0-9]+)\.[0-9]+\.[0-9]+$ ]]; then
            MAJOR_TAG="v${BASH_REMATCH[1]}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "major=$MAJOR_TAG" >> $GITHUB_OUTPUT
            echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Valid semver detected: $TAG"
          else
            echo "::error::Invalid tag format '$TAG'. Use vX.Y.Z"
            exit 1
          fi

      - name: Sync Tags
        run: |
          git fetch --tags
          TAG="${{ steps.version.outputs.tag }}"
          MAJOR="${{ steps.version.outputs.major }}"
          if [[ "${{ env.ENABLE_MAJOR_TAG }}" == "true" ]]; then
            echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Updating major tag '$MAJOR' -> $TAG"
            git tag -f "$MAJOR" "$TAG"
            git push origin "$MAJOR" --force || { echo "::error::Failed to push major tag"; exit 1; }
            echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] '$MAJOR' tag updated"
          else
            echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Major tag update skipped"
          fi
          if [[ "${{ env.ENABLE_LATEST_TAG }}" == "true" ]]; then
            echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Updating 'latest' tag -> $TAG"
            git tag -f "latest" "$TAG"
            git push origin "latest" --force || { echo "::error::Failed to push latest tag"; exit 1; }
            echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] 'latest' tag updated"
          else
            echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Latest tag update skipped"
          fi

      - name: Clean Up Workspace
        if: always()
        run: |
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Cleaning up workspace..."
          rm -rf $GITHUB_WORKSPACE/* $GITHUB_WORKSPACE/.*
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Workspace cleaned"

  notify_teams:
    needs: [bump_and_pr, wait_for_approval, merge_and_tag, sync_tags]
    permissions:
      contents: none
    runs-on: ubuntu-latest
    steps:
      - name: Send Teams Notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            console.log(`[$(new Date().toISOString())] Sending Teams notification...`);
            const teamsWebhook = '${{ secrets.TEAMS_WEBHOOK_URL }}';
            const isSuccess = ${{ job.status == 'success' }};
            const title = isSuccess ? "Release Workflow Succeeded" : "Release Workflow Failed";
            const facts = isSuccess
              ? [
                  { "name": "Repository", "value": "${{ github.repository }}" },
                  { "name": "Tag", "value": "${{ github.event.inputs.TAG_NAME || github.ref_name }}" }
                ]
              : [
                  { "name": "Repository", "value": "${{ github.repository }}" },
                  { "name": "Tag", "value": "${{ github.event.inputs.TAG_NAME || github.ref_name }}" },
                  { "name": "Run ID", "value": "${{ github.run_id }}" }
                ];
            const message = {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "summary": title,
              "sections": [{
                "activityTitle": title,
                "facts": facts,
                "markdown": true
              }],
              "potentialAction": [{
                "@type": "OpenUri",
                "name": isSuccess ? "View Release" : "View Run",
                "targets": [{ "os": "default", "uri": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }]
              }]
            };
            const response = await fetch(teamsWebhook, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(message)
            });
            if (!response.ok) {
              core.setFailed(`Failed to send Teams notification: ${response.statusText}`);
            } else {
              console.log(`[$(new Date().toISOString())] Teams notification sent successfully`);