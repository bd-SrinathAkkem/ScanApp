#!/usr/bin/env bash
# Check workflow semver tags
# ---------------------------------------------------------------------------
 
set -euo pipefail
 
WORKFLOW_DIR="/Users/reddyakkem/black-duck-projects/blackduck-inc/black-duck-security-scan/.github/workflows"
[[ -d "$WORKFLOW_DIR" ]] || { echo "‚ùå  $WORKFLOW_DIR not found"; exit 1; }
 
# Pick grep/sort implementations ------------------------------------------------
GREP_BIN="grep"
SORT_BIN="sort"
command -v ggrep >/dev/null 2>&1 && GREP_BIN="ggrep"
command -v gsort >/dev/null 2>&1 && SORT_BIN="gsort"
 
# Helper: compare versions A < B? (returns 0 if A is older than B)
ver_lt() {
  # First try gsort -V if present
  if "$SORT_BIN" -V </dev/null &>/dev/null; then
    [[ "$("$SORT_BIN" -V <(printf "%s\n%s" "$1" "$2") | head -n1)" != "$2" ]]
    return
  fi
  # Fallback: Python natural-version compare (handles 1.2.3-beta etc.)
  /usr/bin/python3 - "$1" "$2" <<'PY'
import re, sys, itertools, functools
def parts(v): return [int(x) if x.isdigit() else x
                      for x in re.split(r'([0-9]+)', v.strip("v")) if x!='']
def cmp(a,b):
    for x,y in itertools.zip_longest(parts(a), parts(b), fillvalue=0):
        if x==y: continue
        # numeric vs string: strings > numbers so treat as newer
        if isinstance(x,int) and isinstance(y,str): return -1
        if isinstance(x,str) and isinstance(y,int): return 1
        return (x>y)-(x<y)
    return 0
sys.exit(0 if cmp(sys.argv[1], sys.argv[2])<0 else 1)
PY
}
 
echo "üîç  Scanning workflow files for pinned actions‚Ä¶"
 
# 1. Extract all "owner/repo@tag" references ------------------------------------
uses_lines=()
while IFS= read -r line; do
  uses_lines+=("$line")
done < <(
  "$GREP_BIN" -Erho \
    'uses:[[:space:]]*[^@[:space:]]+@[^[:space:]]+' \
    "$WORKFLOW_DIR" --include="*.y*ml" |
  sed -E 's/uses:[[:space:]]*//' | sort -u
)
 
(( ${#uses_lines[@]} == 0 )) && { echo "No pinned actions found."; exit 0; }
 
# 2. Iterate & compare ----------------------------------------------------------
for entry in "${uses_lines[@]}"; do
  action_path="${entry%@*}"      # owner/repo
  current_tag="${entry##*@}"     # v1.2.3 etc.
 
  # GitHub API: latest *release*, else latest tag
  latest_tag=$(curl -sSfL \
        -H "Accept: application/vnd.github+json" \
"https://api.github.com/repos/$action_path/releases/latest" 2>/dev/null |
        jq -r '.tag_name // empty')
 
  if [[ -z "$latest_tag" || "$latest_tag" == "null" ]]; then
    latest_tag=$(curl -sSfL \
          -H "Accept: application/vnd.github+json" \
"https://api.github.com/repos/$action_path/tags?per_page=1" |
          jq -r '.[0].name // empty')
  fi
 
  if [[ -z "$latest_tag" ]]; then
    printf "‚ö†Ô∏è  %-35s  (could not determine latest tag)\n" "$action_path"
    continue
  fi
 
  if ver_lt "$current_tag" "$latest_tag"; then
    printf "‚û°Ô∏è  %-35s  current %-12s  latest %-12s  UPDATE\n" \
           "$action_path" "$current_tag" "$latest_tag"
    echo "   suggested line ‚Üí uses: $action_path@$latest_tag"
  else
    printf "‚úÖ %-35s  current %-12s  up-to-date\n" "$action_path" "$current_tag"
  fi
done
