name: Release-Tag-Sync

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Bump Version (e.g., v1.0.0)'
        required: true
        
  push:
    tags:
      - 'v*.*.*'

env:
  enable_major_tag: true
  enable_latest_tag: true
  RELEASE_BRANCH_PREFIX: release
  BASE_BRANCH: ${{ github.event.repository.default_branch || 'main' }}

concurrency:
  group: release-${{ github.event.inputs.version_tag || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  bump_and_pr:
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      pull-requests: write
    runs-on: 
      - ubuntu-latest
      # - self-hosted
    timeout-minutes: 10
    outputs:
      output_release_branch: ${{ steps.create-branch.outputs.release_branch }}
      output_pr_number: ${{ steps.create-pr.outputs.pr_number }}
      output_next_version_tag: ${{ steps.validate-tag.outputs.next_version_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate and Increment Version Tag
        id: validate-tag
        run: |
          input_version_tag="${{ github.event.inputs.version_tag }}"
          [[ "$input_version_tag" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]] || { echo "::error::Invalid tag format. Use vX.Y.Z"; exit 1; }
          input_version_tag="${input_version_tag#v}"
          IFS='.' read -r major minor patch <<< "$input_version_tag"
          git fetch --tags
          matching_version_tags=$(git tag | grep -E "^v$major\.$minor\.[0-9]+$" | sort -V)
          if [ -z "$matching_version_tags" ]; then
            next_version_tag="v$major.$minor.$patch"
          else
            highest_patch=$(echo "$matching_version_tags" | tail -n 1 | cut -d'.' -f3)
            if [ "$highest_patch" -lt 9 ]; then
              next_version_tag="v$major.$minor.$((highest_patch + 1))"
            elif [ "$minor" -lt 9 ]; then
              next_version_tag="v$major.$((minor + 1)).0"
            else
              next_version_tag="v$((major + 1)).0.0"
            fi
          fi
          while git tag | grep -q "^$next_version_tag$"; do
            IFS='.' read -r _ major minor patch <<< "${next_version_tag#v}"
            if [ "$patch" -lt 9 ]; then
              next_version_tag="v$major.$minor.$((patch + 1))"
            elif [ "$minor" -lt 9 ]; then
              next_version_tag="v$major.$((minor + 1)).0"
            else
              next_version_tag="v$((major + 1)).0.0"
            fi
          done
          echo "next_version_tag=$next_version_tag" >> $GITHUB_OUTPUT
          echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Next version tag: $next_version_tag"

      - uses: actions/setup-node@v3
        with:
          node-version: 20
          
      - name: Bump Version and Create Branch
        id: create-branch
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "bot@example.com"
          npm ci || { echo "::error::npm ci failed"; exit 1; }
          next_version_tag="${{ steps.validate-tag.outputs.next_version_tag }}"
          stripped_version_tag="${next_version_tag#v}"
          npm version "$stripped_version_tag" --no-git-tag-version || { echo "::error::npm version failed"; exit 1; }
          git add package.json package-lock.json
          git commit -m "Bump version to $next_version_tag"
          release_branch=${{ env.RELEASE_BRANCH_PREFIX }}_${next_version_tag}
          git checkout -b "$release_branch"
          git push origin "$release_branch" || { echo "::error::git push failed"; exit 1; }
          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const octokit = github;
            const { data: pr } = await octokit.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${{ steps.validate-tag.outputs.next_version_tag }}`,
              body: `Automated release for ${{ steps.validate-tag.outputs.next_version_tag }}`,
              head: `${{ steps.create-branch.outputs.release_branch }}`,
              base: '${{ env.BASE_BRANCH }}'
            });
            core.setOutput('pr_number', pr.number);
            
      - name: Clean Workspace
        if: always()
        run: rm -rf $GITHUB_WORKSPACE/* $GITHUB_WORKSPACE/.*

  wait_for_approval:
    if: github.event_name == 'workflow_dispatch'
    needs: bump_and_pr
    permissions:
      pull-requests: write
    runs-on: 
      - ubuntu-latest
      # - self-hosted
    timeout-minutes: 60
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const pr_number = ${{ needs.bump_and_pr.outputs.output_pr_number }};
            for (let i = 0; i < 120; i++) {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });
              if (pr.merged) return;
              if (pr.state === 'closed' && !pr.merged) {
                core.setFailed(`PR #${pr_number} was closed without merging.`);
                return;
              }
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });
              if (reviews.some(review => review.state === 'APPROVED')) return;
              await new Promise(resolve => setTimeout(resolve, 30000));
            }
            core.setFailed(`PR #${pr_number} not approved or merged within time limit.`);

  merge_tag:
    if: github.event_name == 'workflow_dispatch'
    needs: [ wait_for_approval, bump_and_pr ]
    permissions:
      contents: write
      pull-requests: write
    runs-on: 
      - ubuntu-latest
      # - self-hosted
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_BRANCH }}
          fetch-depth: 0

      - name: Merge and Tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const pr_number = ${{ needs.bump_and_pr.outputs.output_pr_number }};
            const octokit = github;
            const { data: pr } = await octokit.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            if (pr.merged) {
              console.log(`PR #${pr_number} already merged.`);
            } else if (pr.state === 'closed') {
              core.setFailed(`PR #${pr_number} was closed without merging.`);
              return;
            } else if (pr.mergeable_state === 'dirty') {
              await octokit.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: 'Merge conflict detected. Please resolve manually and create tag.'
              });
              core.setFailed(`Merge conflict detected in PR #${pr_number}.`);
              return;
            } else {
              await octokit.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                merge_method: 'merge'
              });
            }
  
      - name: Tag and Push
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "bot@example.com"
          git pull origin ${{ env.BASE_BRANCH }}
          git tag ${{ needs.bump_and_pr.outputs.output_next_version_tag }}
          git push origin ${{ needs.bump_and_pr.outputs.output_next_version_tag }} || { echo "::error::Tag push failed"; exit 1; }
          git push origin --delete ${{ needs.bump_and_pr.outputs.output_release_branch }} || true
      
      - name: Create Draft Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const octokit = github
            const tag_name = '${{ needs.bump_and_pr.outputs.output_next_version_tag }}';
            try {
              await octokit.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag_name,
                target_commitish: 'main',
                name: `Release ${tag_name}`,
                body: `Automated release for ${tag_name}`,
                draft: false,
                prerelease: false,
                generate_release_notes: false,
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              });
              console.log(`Draft release created for ${tag_name}`);
            } catch (error) {
              await octokit.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ needs.bump_and_pr.outputs.output_pr_number }},
                body: `Failed to create draft release for ${tag_name}: ${error.message}`
              });
              core.setFailed(`Draft release creation failed: ${error.message}`);
            }  
      
      - name: Clean Workspace
        if: always()
        run: rm -rf $GITHUB_WORKSPACE/* $GITHUB_WORKSPACE/.*
        
  sync_tags:
    needs: [ merge_tag, wait_for_approval, bump_and_pr ]
    permissions:
      contents: write
      id-token: write
    runs-on: 
      - ubuntu-latest
      # - self-hosted
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync Tags
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "bot@example.com"
          version_tag=${{ needs.bump_and_pr.outputs.output_next_version_tag }}
          [[ "$version_tag" =~ ^v([0-9]+)\.[0-9]+\.[0-9]+$ ]] || { echo "::error::Invalid tag $version_tag. Use vX.Y.Z"; exit 1; }
          major_version_tag="v${BASH_REMATCH[1]}"
          git fetch --tags
          if [[ "${{ env.enable_major_tag }}" == "true" && ! $(git tag | grep -q "^$major_version_tag$") ]]; then
            git tag -f "$major_version_tag" "$version_tag"
            git push origin "$major_version_tag" --force || { echo "::error::Major tag push failed"; exit 1; }
          fi
          if [[ "${{ env.enable_latest_tag }}" == "true" ]]; then
            git tag -f latest "$version_tag"
            git push origin latest --force || { echo "::error::Latest tag push failed"; exit 1; }
          fi

      - name: Clean Workspace
        if: always()
        run: rm -rf $GITHUB_WORKSPACE/* $GITHUB_WORKSPACE/.*
